const RESET = '\x1b[0m'
// const BRIGHT = '\x1b[1m'
// const DIM = '\x1b[2m'
function toHex (val, len = 2) {
  return val.toString(16).padStart(len, '0')
}
function col (num) {
  return `\x1b[38;5;${num}m`
}
function colored (value, color) {
  return `${col(color)}${value}${RESET}`
}
function dim (value) {
  return `${col(238)}${value}${RESET}`
}

const DATA_COLOR = 39
const OPTINAL_DATA_COLOR = 83

const packetTypeColors = {
  0x01: 99,
  0x02: 105,
  0x05: 208
}

// const returnCodeColors = {
//   0x00: 83,
//   0x01: 203,
//   0x02: 203,
//   0x03: 203,
//   0x04: 203,
//   0x05: 203,
//   0x06: 203,
//   0x07: 203,
//   0x82: 203,
//   0x90: 203,
//   0x91: 203
// }

function colorData (packet) {
  return `${colored(toHex(packet.data), DATA_COLOR)}`
}
export const pretty = Object.create({})
if (typeof window !== 'undefined') {
  var style = document.createElement('style')
  style.appendChild(document.createTextNode(`
    :root {--type1-color: #875fff; --data-color: #00afff}
    .telegram{margin:8px;font-family:monospace}
    .telegram span{padding:3px;border-radius:3px;background:#333;margin:3px}
    .telegram span.dim{padding:3px;border-radius:3px;background:none;border:1px solid grey}
    .dim {color:grey}
    .type1{color:#875fff}
    .type2{color:#8787ff}
    .type4{color:orange}
    .data_length{color: var(--data-color)}
    .optional_length{color:#5fff5f}
    .data{color: var(--data-color)}
    .optional_data{color:#5fff5f}
    `))
  document.head.appendChild(style)
}

function makeStyle (col, dim) {
  if (dim) {
    return `color:${col};background:none;padding:3px;border-radius:3px;border:1px solid #333`
  } else {
    return `color:${col};background:#333;padding:3px;border-radius:3px;`
  }
}
pretty.toString = function (packet) {
  return `<div class="telegram"><span class="sync_byte dim">${55}</span>.<span class="data_length">${toHex(packet.dataLength, 4)}</span>.<span class="optional_length">${toHex(packet.optionalLength)}</span>.<span class="packet_type type${packet.packetType}">${toHex(packet.packetType)}</span>.<span class="header_crc crc dim">${toHex(packet.crc8Header)}</span>.<span class="data">${toHex(packet.data)}</span>.${packet.optionalLength === 0 ? '' : '<span class="optional_data">' + toHex(packet.optionalData) + '</span>.'}<span class="body_crc crc dim">${toHex(packet.crc8Data)}</div>`
}
pretty.logESP3 = function (packet) {
  if (typeof window === 'undefined') {
    console.log(`${dim(55)}.${colored(toHex(packet.dataLength, 4), DATA_COLOR)}.${colored(toHex(packet.optionalLength), OPTINAL_DATA_COLOR)}.${colored(toHex(packet.packetType), packetTypeColors[packet.packetType])}.${dim(toHex(packet.crc8Header))}.${colorData(packet)}${colored(packet.optionalLength === 0 ? '' : '.' + toHex(packet.optionalData), OPTINAL_DATA_COLOR)}.${dim(toHex(packet.crc8Data))}`)
  } else {
    console.log(
      `%c55%c.%c${toHex(packet.dataLength, 4)}%c.%c${toHex(packet.optionalLength)}%c.%c${toHex(packet.packetType)}%c.%c${toHex(packet.crc8Header)}%c.%c${packet}${packet.optionalLength === 0 ? '' : '%c.%c' + toHex(packet.optionalData)}%c.%c${toHex(packet.crc8Data)}`,
      makeStyle('grey', true),
      'color:black;',
      makeStyle('#00afff'),
      'color:black;',
      makeStyle('#5fff5f'),
      'color:black;',
      makeStyle('#875fff'),
      'color:black;',
      makeStyle('grey', true),
      'color:black;',
      makeStyle('#00afff'),
      'color:black;',
      makeStyle('#5fff5f'),
      'color:black;',
      makeStyle('grey', true)
    )
    // return `<div class="telegram"><span class="sync_byte dim">${55}</span>.<span class="data_length">${toHex(packet.dataLength, 4)}</span>.<span class="optional_length">${toHex(packet.optionalLength)}</span>.<span class="packet_type type${packet.packetType}">${toHex(packet.packetType)}</span>.<span class="header_crc crc dim">${toHex(packet.crc8Header)}</span>.<span class="data">${toHex(packet.data)}</span>.${packet.optionalLength === 0 ? '' : '<span class="optional_data">' + toHex(packet.optionalData) + '</span>.'}<span class="body_crc crc dim">${toHex(packet.crc8Data)}</div>`
  }
}
