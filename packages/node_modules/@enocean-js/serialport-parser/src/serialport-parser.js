// Copyright 2018 Holger Will <h.will@klimapartner.de>
import { makeESP3Packet } from '@enocean-js/esp3-packets'

const Transform = require('stream').Transform

const WAIT_FOR_SYNC_BYTE = 0
const FILL_HEADER = 1
const CHECK_CRC8_HEADER = 2
const FILL_DATA_OPTIONALDATA = 3
const CHECK_CRC8_DATAS = 4

export default class ESP3Parser extends Transform {
  constructor (options = {}) {
    super({ ...options, ...{ readableObjectMode: true } })
    this.currentESP3Packet = makeESP3Packet()
    this.state = WAIT_FOR_SYNC_BYTE
  }
  _transform (chunk, encoding, cb) {
    for (var offset = 0; offset < chunk.length; offset++) {
      let byte = chunk[offset]
      switch (this.state) {
        case WAIT_FOR_SYNC_BYTE:
          if (byte === 0x55) {
            this.currentESP3Packet = makeESP3Packet(byte)
            this.state = FILL_HEADER
          }
          break
        case FILL_HEADER:
          this.currentESP3Packet.push(byte)
          if (this.currentESP3Packet.length < 5) {
            break
          }
          this.state = CHECK_CRC8_HEADER
          break
        case CHECK_CRC8_HEADER:
          this.currentESP3Packet.push(byte)
          if (!this.currentESP3Packet.isHeaderOK()) {
            this.emit('error', {
              code: 1,
              name: 'WRONG_HEADER_CHECKSUM',
              desc: 'header checksum test failed'
            })
            this.state = WAIT_FOR_SYNC_BYTE
            break
          }
          if (this.currentESP3Packet.dataLength + this.currentESP3Packet.optionalLength <= 0) {
            this.emit('error', {
              code: 1,
              name: 'ILLEGAL_PACKET_LENGTH',
              desc: 'there must be at least 1 byte of data or optional data, it can not be 0'
            })
            this.state = WAIT_FOR_SYNC_BYTE
            break
          }
          this.state = FILL_DATA_OPTIONALDATA
          break
        case FILL_DATA_OPTIONALDATA:
          this.currentESP3Packet.push(byte)
          if (this.currentESP3Packet.length < this.currentESP3Packet.dataLength + this.currentESP3Packet.optionalLength + 6) {
            break
          }
          this.state = CHECK_CRC8_DATAS
          break
        case CHECK_CRC8_DATAS:
          this.currentESP3Packet.push(byte)
          this.state = WAIT_FOR_SYNC_BYTE
          if (!this.currentESP3Packet.isBodyOK()) {
            this.emit('error', {
              code: 2,
              name: 'WRONG_BODY_CHECKSUM',
              desc: 'data checksum test failed'
            })
            break
          }
          this.push(this.currentESP3Packet)
          break
      }
    }
    cb()
  }
  _flush (cb) {
  }
}
