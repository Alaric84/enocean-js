export default class ByteArray extends Array {
  set (arr, offset) {
    var tmp = ByteArray.from(arr)
    if (tmp.length === 0) return
    this.splice(offset, tmp.length, ...tmp)
  }
  toString (type = 'hex') {
    if (type === 'ascii') {
      return this.map(item => String.fromCharCode(item)).join('')
    }
    return this.map(item => item.toString(16).padStart(2, '0')).join('')
  }
}
ByteArray.from = function (...args) {
  var tmp = []
  args.forEach(item => {
    if (Number.isInteger(item) && item <= 255) {
      tmp.push(item)
    }
    if (Number.isInteger(item) && item > 255) {
      var t3 = ByteArray.from(item.toString(16))
      t3.forEach(x => {
        tmp.push(x)
      })
    }
    if (typeof item === 'string') {
      if (item.length % 2 !== 0) {
        item = `0${item}`
      }
      if (!/^[0-9abcdef]*$/.test(args[0])) {
        throw new Error('String MAY only contain "0-9 a b c d e f"')
      }
      ((item.match(/.{1,2}/g) || []).map(item => parseInt(item, 16))).forEach(x => {
        tmp.push(x)
      })
    }
    if (Array.isArray(item)) {
      var t2 = ByteArray.from(...item)
      t2.forEach(x => {
        tmp.push(x)
      })
    }
  })
  if (tmp.length === 1) {
    var res = new ByteArray()
    res[0] = tmp[0]
    return res
  } else {
    return new ByteArray(...tmp)
  }
}
export { ByteArray }
