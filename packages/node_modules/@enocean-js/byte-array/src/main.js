export default class ByteArray extends Array {
  set (arr, offset) {
    if (arr.length === 0) return
    this.splice(offset, arr.length, ...arr)
  }
  toString () {
    return this.map(item => item.toString(16).padStart(2, '0')).join('')
  }
}
ByteArray.from = function (...args) {
  if (typeof args[0] === 'string') {
    if (args[0].length % 2 !== 0) {
      throw new Error('Number of Chars MUST be devisibly 2')
    }
    if (!/^[0-9abcdef]*$/.test(args[0])) {
      throw new Error('String MAY only contain "0-9 a b c d e f"')
    }
    return new ByteArray(...((args[0].match(/.{1,2}/g) || []).map(item => parseInt(item, 16))))
  }
  return new ByteArray(...args[0])
}
