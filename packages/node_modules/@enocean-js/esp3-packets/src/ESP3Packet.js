import { toCRC8 } from '@enocean-js/crc8'
import ByteArray from '@enocean-js/byte-array'

export const makeESP3Packet = function (input) {
  let packetBytes = ByteArray.from(input)
  return Object.freeze({
    push (...value) {
      packetBytes.push(...value)
    },
    shift () {
      packetBytes.shift()
    },
    slice (...args) {
      packetBytes.slice(...args)
    },
    findIndex (func) {
      return packetBytes.findIndex(func)
    },
    getItem (index) {
      return packetBytes[index]
    },
    setItem (index, value) {
      packetBytes[index] = value
    },
    clear () {
      packetBytes = new ByteArray()
    },
    get length () {
      return packetBytes.length
    },
    get dataLength () {
      return packetBytes[1] * 256 + packetBytes[2]
    },
    get optionalLength () {
      return packetBytes[3]
    },
    get packetType () {
      return packetBytes[4]
    },
    get header () {
      return packetBytes.slice(1, 5)
    },
    get data () {
      return packetBytes.slice(6, 6 + this.dataLength)
    },
    get optionalData () {
      return packetBytes.slice(6 + this.dataLength, 6 + this.dataLength + this.optionalLength)
    },
    get body () {
      return packetBytes.slice(6, 6 + this.dataLength + this.optionalLength)
    },
    isHeaderOK () {
      return this.header.reduce(toCRC8, 0) === packetBytes[5]
    },
    isBodyOK () {
      return this.body.reduce(toCRC8, 0) === packetBytes[6 + this.dataLength + this.optionalLength]
    },
    isPacketOK () {
      return this.isHeaderOK() && this.isBodyOK()
    },
    toString () {
      return packetBytes.map(item => item.toString(16).padStart(2, '0')).join('')
    },
    toSendableString () {
      return packetBytes.map(item => String.fromCharCode(item)).join('')
    },
    toJSON () {
      return {
        syncByte: 0x55,
        header: {
          dataLength: this.dataLength,
          optionalLength: this.optionalLength,
          packetType: this.packetType
        },
        crc8Header: packetBytes[5],
        data: this.data,
        optionalData: this.optionalData,
        crc8Data: packetBytes[6 + this.dataLength + this.optionalLength]
      }
    }
  })
}
export default makeESP3Packet
