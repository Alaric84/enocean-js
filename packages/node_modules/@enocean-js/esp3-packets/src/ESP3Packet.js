import emptyPacket from './EmptyPacketStructure.js'
import { toCRC8 } from '@enocean-js/crc8'

export default class ESP3Packet {
  constructor (packet = emptyPacket) {
    this.fromJSON(packet)
  }
  get syncByte () {
    return 0x55
  }
  get dataLength () {
    return this._raw[1] * 256 + this._raw[2]
  }
  set dataLength (value) {
    // setting dataLength does not resize the buffer, set actual data to resize
    var byte0 = value % 256
    var byte1 = (value - byte0) / 256
    this._raw.set([byte1, byte0], 1)
    this._recalcCRC8Header()
  }
  get optionalLength () {
    return this._raw[3]
  }
  set optionalLength (value) {
    this._raw[3] = value
    this._recalcCRC8Header()
  }
  get packetType () {
    return this._raw[4]
  }
  set packetType (value) {
    this._raw[4] = value
    this._recalcCRC8Header()
  }
  get crc8Header () {
    return this._raw[5]
  }
  set crc8Header (value) {
    this._raw[5] = value
  }
  get data () {
    return this._raw.slice(6, 6 + this.dataLength)
  }
  set data (value) {
    if (typeof value === 'string') {
      value = (value.match(/.{1,2}/g) || []).map(item => parseInt(item, 16))
      console.log(value)
    }
    var tmp = new Uint8Array(7 + value.length + this.optionalLength)
    tmp[0] = 0x55
    tmp.set(this.header, 1)
    tmp.set(value, 6)
    tmp.set(this.optionalData, 6 + value.length)
    tmp[5] = this.crc8Header
    tmp[6 + value.length + this.optionalLength] = this.crc8Data
    this._raw = tmp
    this.dataLength = value.length
    this._recalCRC8Data()
  }
  get optionalData () {
    return this._raw.slice(6 + this.dataLength, 6 + this.dataLength + this.optionalLength)
  }
  set optionalData (value) {
    if (typeof value === 'string') {
      value = (value.match(/.{1,2}/g) || []).map(item => parseInt(item, 16))
      console.log(value)
    }
    var tmp = new Uint8Array(7 + this.dataLength + value.length)
    tmp[0] = 0x55
    tmp.set(this.header, 1)
    tmp.set(this.data, 6)
    tmp.set(value, 6 + this.dataLength)
    tmp[5] = this.crc8Header
    tmp[6 + this.datalength + value.length] = this.crc8Data
    this._raw = tmp
    this.optionalLength = value.length
    this._recalCRC8Data()
  }
  get body () {
    return this._raw.slice(6, 6 + this.dataLength + this.optionalLength)
  }
  get crc8Data () {
    return this._raw[6 + this.dataLength + this.optionalLength]
  }
  set crc8Data (value) {
    this._raw[6 + this.dataLength + this.optionalLength] = value
  }
  get header () {
    return this._raw.slice(1, 5)
  }
  _recalcCRC8Header () {
    this.crc8Header = this.header.reduce(toCRC8, 0)
  }
  _recalCRC8Data () {
    this.crc8Data = this.body.reduce(toCRC8, 0)
  }
  fromJSON (packet) {
    this._raw = new Uint8Array(7 + packet.header.dataLength + packet.header.optionalLength)
    this._raw[0] = 0x55
    var byte0 = packet.header.dataLength % 256
    var byte1 = (packet.header.dataLength - byte0) / 256
    this._raw.set([byte1, byte0], 1)
    this.dataLength = packet.header.dataLength
    this._raw[3] = packet.header.optinalLength
    this._raw[4] = packet.header.packetType
    this._raw[5] = packet.crc8Header
    this._raw.set(packet.data, 6)
    this._raw.set(packet.optionalData, 6 + packet.header.dataLength)
    this._raw[6 + packet.header.dataLength + packet.header.optionalLength] = packet.crc8Data
  }
  fromString () {

  }
}
ESP3Packet.prototype.toString = function () {
  return Array.from(this._raw).map(item => item.toString(16).padStart(2, '0')).join('')
}
ESP3Packet.prototype.toJSON = function () {
  return {
    syncByte: 0x55,
    header: {
      dataLength: this.dataLength,
      optionalLength: this.optionalLength,
      packetType: this.packetType
    },
    crc8Header: this.crc8Header,
    data: this.data,
    optionalData: this.optionalData,
    crc8Data: this.crc8Data
  }
}
