const Response = Object.create({})
Response.from = function (esp3Packet, typeDesc = {}) {
  const RETURN_CODE_LOCATION = 0
  const responseTypes = {
    0x00: 'RET_OK',
    0x01: 'RET_ERROR',
    0x02: 'RET_NOT_SUPPORTED',
    0x03: 'RET_WRONG_PARAM',
    0x04: 'RET_OPERATION_DENIED',
    0x05: 'RET_LOCK_SET',
    0x06: 'RET_BUFFER_TO_SMALL',
    0x07: 'RET_NO_FREE_BUFFER',
    0x82: 'FLASH_HW_ERROR',
    0x90: 'BASEID_OUT_OF_RANGE',
    0x91: 'BASEID_MAX_REACHED'
  }
  const packet = esp3Packet
  var res = Object.create({})
  if (typeDesc[packet.data[RETURN_CODE_LOCATION]]) {
    typeDesc[packet.data[RETURN_CODE_LOCATION]].forEach(field => {
      if (field.location) {
        if (field.length) {
          var offset = field.offset || 0
          if (field.length === 1) {
            res[field.name] = field.retFunc(packet[field.location][offset])
          } else {
            res[field.name] = field.retFunc(packet[field.location].slice(offset, offset + field.length))
          }
        } else {
          res[field.name] = field.retFunc(packet[field.location])
        }
      } else {
        res[field.name] = field.value
      }
    })
  }
  res.returnCode = packet.data[0]
  res.returnMsg = responseTypes[packet.data[0]]
  res.getRawPacket = function () {
    return packet.toString('hex')
  }
  return Object.freeze(res)
}
export default Response
