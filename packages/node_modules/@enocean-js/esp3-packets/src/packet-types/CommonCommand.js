import { ESP3Packet } from '../ESP3Packet.js'
import { CO_WR_SLEEP } from './common-commands/CO_WR_SLEEP.js'
import { CO_WR_RESET } from './common-commands/CO_WR_RESET.js'
import { CO_RD_VERSION } from './common-commands/CO_RD_VERSION.js'

const commandTypes = {
  CO_WR_SLEEP,
  CO_WR_RESET,
  CO_RD_VERSION
}

const CommonCommand = Object.create({})
CommonCommand.from = function (esp3Packet) {
  const COMMAND_TYPE_LOCATION = 0
  var res = Object.create({
    get commandType () {
      return commandTypes[esp3Packet.data[COMMAND_TYPE_LOCATION]]
    }
  })
  return Object.freeze(res)
}

CommonCommand.connect = function (sender) {
  var packet = ESP3Packet.from('5500010005000000')
  var commonCommand = CommonCommand.from(packet)
  const members = {
    send (command, args = [], optionalArgs = []) {
      var com = commandTypes[command]
      commonCommand = ESP3Packet.from({
        data: [com.commandCode, args],
        optionalData: optionalArgs,
        packetType: 5
      })
      return sender.send(commonCommand.toString('hex'), com.responsDefinition)
    },
    reset () {
      return this.send('CO_WR_RESET')
    },
    sleep (ms) {
      const cs = Math.floor(ms / 10).toString(16).padStart(6, '0')
      return this.send('CO_WR_SLEEP', [0, cs])
    },
    getVersion () {
      return this.send('CO_RD_VERSION')
    }
  }
  return Object.freeze(members)
}

// function makeCommandSender (options) {
//   const sender = SerialportSender(options)
//   const commandList = {
//     'CO_RD_SYS_LOG': {
//       commandCode: 4,
//       responsDefinition: {
//       }
//     },
//
//     'CO_WR_IDBASE': {
//       commandCode: 7,
//       responsDefinition: {
//         0: [{
//           name: 'returnCode',
//           value: 'RET_OK'
//         }],
//         2: [{
//           name: 'returnCode',
//           value: 'RET_NOT_SUPPORTED'
//         }],
//         0x82: [{
//           name: 'returnCode',
//           value: 'FLASH_HW_ERROR'
//         }],
//         0x90: [{
//           name: 'returnCode',
//           value: 'BASEID_OUT_OF_RANGE'
//         }],
//         0x91: [{
//           name: 'returnCode',
//           value: 'BASEID_MAX_REACHED'
//         }]
//       }
//     },
//     'CO_RD_IDBASE': {
//       commandCode: 8,
//       responsDefinition: {
//         0: [
//           {
//             name: 'returnCode',
//             value: 'RET_OK'
//           },
//           {
//             name: 'baseId',
//             location: 'data',
//             offset: 1,
//             length: 4,
//             retFunc: x => x.toString('hex')
//           },
//           {
//             name: 'remainingWriteCycles',
//             location: 'optionalData',
//             offset: 0,
//             length: 1,
//             retFunc: x => parseInt(x.toString(), 'hex')
//           }
//         ]
//       }
//     }
//   }
//   return {
//     send (command, args = [], optionalArgs = []) {
//       var com = commandList[command]
//       var sendablePacket = ESP3Packet.from({ data: [com.commandCode, args], optionalData: optionalArgs, packetType: 5 })
//       console.log(sendablePacket.toString('hex'))
//       return sender.send(Buffer.from(sendablePacket.toString('hex'), 'hex'), com.responsDefinition)
//     }
//   }
// }

export default CommonCommand
