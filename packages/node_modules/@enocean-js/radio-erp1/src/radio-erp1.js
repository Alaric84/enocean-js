import { ByteArray } from '../../byte-array/src/byte-array.js'
import { ESP3Packet } from '../../esp3-packet/src/esp3-packet.js'
import { decode, getTeachInInfo } from '../../eep-transcoder/src/eep-transcoder.js'

class RadioERP1 extends ESP3Packet {
  get packetType () {
    return 1
  }
  get RORG () {
    return super.data[0]
  }
  get payload () {
    return super.data.slice(1, super.data.length - 5)
  }
  set payload (data) {
    var dataValue = ByteArray.from(data)
    dataValue.length = super.dataLength - 6
    var newData = ByteArray.from(super.data)
    newData.set(dataValue, 1)
    super.data = newData
    super.fixPacket()
  }
  get senderId () {
    return super.data.slice(super.data.length - 5, super.data.length - 1).toString(16)
  }
  set senderId (id) {
    var idValue = ByteArray.from(id)
    idValue.length = 4
    var newData = ByteArray.from(super.data)
    newData.set(idValue, super.data.length - 5)
    super.data = newData
    super.fixPacket()
  }
  set status (val) {
    var dat = super.data
    dat[super.data.length - 1] = val
    super.data = dat
    super.fixPacket()
  }
  get status () {
    return super.data[super.data.length - 1]
  }
  get T21 () {
    return ByteArray.from(this.status).getSingleBit(2)
  }
  set T21 (val) {
    this.status = ByteArray.from(this.status).setSingleBit(2, val)[0]
    super.fixPacket()
  }
  get NU () {
    return ByteArray.from(this.status).getSingleBit(3)
  }
  set NU (val) {
    this.status = ByteArray.from(this.status).setSingleBit(3, val)[0]
    super.fixPacket()
  }
  get subTelNum () {
    return super.optionalData[0]
  }
  get destinationId () {
    return super.optionalData.slice(1, 5).toString(16)
  }
  set destinationId (id) {
    var idValue = ByteArray.from(id)
    idValue.length = 4
    var newData = ByteArray.from(super.optionalData)
    newData.set(idValue, super.optionalData.length - 6)
    super.optionalData = newData
    super.fixPacket()
  }
  get RSSI () {
    return super.optionalData[5]
  }
  get securityLevel () {
    return super.optionalData[6]
  }
  get teachIn () {
    var mask = 1 << 3
    return (this.payload[this.payload.length - 1] & mask) === 0
  }
  decode (eep, direction) {
    if (this.teachIn && this.RORG !== 0xf6) return this.teachInInfo
    return decode(this, eep, direction)
  }
  get teachInInfo () {
    return getTeachInInfo(this)
  }
  static from (input) {
    var pl
    // put this in separate method 'makeTeachIn'
    if (input.hasOwnProperty('eep')) {
      switch (input.type || parseInt(input.eep.split('-')[0], 16)) {
        case 'RPS':
        case 0xf6:
          return RadioERP1.from({
            data: [0xf6, '00', input.senderId || '00000000', 0x20],
            optionalData: [3, 'ffffffff', 'ff', 0],
            packetType: 1
          })
        case '1BS':
        case 0xd5:
          return RadioERP1.from({
            data: [0xd5, '00', input.senderId || '00000000', 0],
            optionalData: [3, 'ffffffff', 'ff', 0],
            packetType: 1
          })
        default:
          pl = ByteArray.from('00000000')
          pl.setValue(parseInt(input.eep.split('-')[1], 16), 0, 6) // func
          pl.setValue(parseInt(input.eep.split('-')[2], 16), 6, 7) // type
          pl.setValue(input.manufacturerId || 0, 13, 10) // manufacturer
          return RadioERP1.from({
            data: [0xa5, pl, input.senderId || '00000000', 0],
            optionalData: [3, 'ffffffff', 'ff', 0],
            packetType: 1
          })
      }
    }
    if (input.hasOwnProperty('payload')) {
      var rorg
      pl = ByteArray.from(input.payload)
      switch (pl.length) {
        case 1:
          rorg = 0xf6
          break
        case 4:
          rorg = 0xa5
          break
        default:
          rorg = 0xd2
      }
      return RadioERP1.from({
        data: [input.rorg || rorg, pl, input.id || '00000000', input.status || 0],
        optionalData: [3, 'ffffffff', 'ff', 0], // always the same for sending ERP1
        packetType: 1 // always the same for sending ERP1
      })
    } else {
      var res = new RadioERP1(super.from(input).toString())
      return res
    }
  }
}
export default RadioERP1
export { RadioERP1 }
