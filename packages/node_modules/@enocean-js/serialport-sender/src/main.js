import { makeESP3Packet, responseConstructor } from '@enocean-js/esp3-packets'

function makeSendablePacket (data, optionalData = []) {
  var packet = makeESP3Packet('5500010005000000')
  packet.data = data
  // packet.optionalData = optionalData
  return packet
}

function makeSender (options) {
  const parser = options.parser
  const port = options.port
  return {
    send (tel, expectedResponseTypes = { 0: [{ returnCode: 'RET_OK' }] }) {
      return new Promise((resolve, reject) => {
        var t1 = setTimeout(() => { resolve(false) }, 10000)
        parser.on('data', data => {
          if (data.packetType === 2) {
            clearTimeout(t1)
            resolve(responseConstructor(data, expectedResponseTypes))
          }
        })
        port.write(tel)
      })
    }
  }
}

function makeCommandSender (options) {
  const sender = makeSender(options)
  const commandList = {
    'CO_RD_VERSION': {
      commandCode: 3,
      responsDefinition: {
        0: [
          {
            name: 'returnCode',
            value: 'RET_OK'
          },
          {
            name: 'appVersion',
            location: 'data',
            offset: 1,
            length: 4,
            retFunc: x => {
              var s = x.toString('hex')
              return `${parseInt(s.substr(0, 2), 'hex')}.${parseInt(s.substr(2, 2), 'hex')}.${parseInt(s.substr(4, 2), 'hex')}.${parseInt(s.substr(6, 2), 'hex')}`
            }
          },
          {
            name: 'apiVersion',
            location: 'data',
            offset: 5,
            length: 4,
            retFunc: x => {
              var s = x.toString('hex')
              return `${parseInt(s.substr(0, 2), 'hex')}.${parseInt(s.substr(2, 2), 'hex')}.${parseInt(s.substr(4, 2), 'hex')}.${parseInt(s.substr(6, 2), 'hex')}`
            }
          },
          {
            name: 'chipId',
            location: 'data',
            offset: 9,
            length: 4,
            retFunc: x => `0x${x.toString('hex')}`
          },
          {
            name: 'chipVersion',
            location: 'data',
            offset: 13,
            length: 4,
            retFunc: x => `0x${x.toString('hex')}`
          },
          {
            name: 'appDescription',
            location: 'data',
            offset: 17,
            length: 16,
            retFunc: x => x.filter(item => item > 0).map(item => String.fromCharCode(item)).join('')
          }
        ],
        2: [{
          name: 'returnCode',
          value: 'RET_NOT_SUPPORTED'
        }]
      }
    },
    'CO_WR_IDBASE': {
      commandCode: 7,
      responsDefinition: {
        0: [{
          name: 'returnCode',
          value: 'RET_OK'
        }],
        2: [{
          name: 'returnCode',
          value: 'RET_NOT_SUPPORTED'
        }],
        0x82: [{
          name: 'returnCode',
          value: 'FLASH_HW_ERROR'
        }],
        0x90: [{
          name: 'returnCode',
          value: 'BASEID_OUT_OF_RANGE'
        }],
        0x91: [{
          name: 'returnCode',
          value: 'BASEID_MAX_REACHED'
        }]
      }
    },
    'CO_RD_IDBASE': {
      commandCode: 8,
      responsDefinition: {
        0: [
          {
            name: 'returnCode',
            value: 'RET_OK'
          },
          {
            name: 'baseId',
            location: 'data',
            offset: 1,
            length: 4,
            retFunc: x => x.toString('hex')
          },
          {
            name: 'remainingWriteCycles',
            location: 'optionalData',
            offset: 0,
            length: 1,
            retFunc: x => parseInt(x.toString(), 'hex')
          }
        ]
      }
    },
    'CO_WR_RESET': {
      commandCode: 2,
      responsDefinition: {
        0: [{
          name: 'returnCode',
          value: 'RET_OK'
        }]
      }
    },
    'CO_WR_SLEEP': {
      commandCode: 1,
      responsDefinition: {
        0: [{
          name: 'returnCode',
          value: 'RET_OK'
        }]
      }
    }
  }
  return {
    send (command, args = [], optionalArgs = []) {
      var com = commandList[command]
      var sendablePacket = makeSendablePacket([com.commandCode, args], optionalArgs)
      console.log(sendablePacket.toString('hex'))
      return sender.send(Buffer.from(sendablePacket.toString('hex'), 'hex'), com.responsDefinition)
    }
  }
}

export default makeSender
export { makeSender, makeCommandSender }
