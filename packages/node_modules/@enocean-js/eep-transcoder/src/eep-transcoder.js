import { RadioERP1 } from '../../esp3-packets/src/esp3-packets.js'
import * as EEP from './eep.js'
export function decode (telegram, eep) {
  var c = EEP[eep.replace(/-/g, '')]
  var radio = RadioERP1.from(telegram)
  var decoded = {}
  c.case.some(function (item) {
    if (item.hasOwnProperty('condition') && item.condition.hasOwnProperty('statusfield')) {
      var s1 = 0
      for (var i = 0; i < 2; i++) {
        var mask = 1 << 7 - parseInt(item.condition.statusfield[i].bitoffs)
        if (parseInt(item.condition.statusfield[i].value) === 1) {
          s1 |= mask
        }
      }
      if (s1 === radio.status) {
        decoded = decodeCase(radio.payload, item)
        return true
      }
    } else {
      if (item.hasOwnProperty('condition') && item.condition.hasOwnProperty('datafield')) {
        const cond = radio.data.getValue(parseInt(item.condition.datafield.bitoffs), parseInt(item.condition.datafield.bitsize))
        if (parseInt(item.condition.datafield.value) === cond) {
          decoded = decodeCase(radio.payload, item)
          return true
        }
      }
      decoded = decodeCase(radio.payload, item)
    }
  })
  return Object.freeze(decoded)
}

function decodeCase (tel, c) {
  var ret = {}
  if (!Array.isArray(c.datafield)) c.datafield = [c.datafield]
  c.datafield.forEach(function (item) {
    var val = tel.getValue(parseInt(item.bitoffs), parseInt(item.bitsize))
    if (item.hasOwnProperty('enum') && item.enum.hasOwnProperty('item')) {
      for (var i = 0; i < item.enum.item.length; i++) {
        if (item.enum.item[i].hasOwnProperty('min')) {
          if (parseInt(item.enum.item[i].min) <= val && parseInt(item.enum.item[i].max) >= val) {
            ret[item.shortcut] = { name: item.data, value: val, desc: item.enum.item[i].description, unit: item.unit }
          }
        }
        if (item.enum.item[i].hasOwnProperty('bitmask')) {
          var mask = parseInt(item.enum.item[i].bitmask)
          if ((val & mask) === parseInt(item.enum.item[i].bitvalue)) {
            ret[item.shortcut] = { name: item.data, value: item.enum.item[i].value, desc: item.enum.item[i].description, unit: item.unit }
          }
        }
        if (parseInt(item.enum.item[i].value) === val) {
          ret[item.shortcut] = { name: item.data, value: val, desc: item.enum.item[i].description, unit: item.unit }
        }
      }
    }
    if (item.hasOwnProperty('range')) {
      var rdist = parseInt(item.range.max) - parseInt(item.range.min)
      if (!item.hasOwnProperty('scale')) {
        item.scale = { min: parseInt(item.range.min), max: parseInt(item.range.max) }
      }
      var sdist = parseInt(item.scale.max) - parseInt(item.scale.min)
      var dx = (sdist / rdist)
      val = (val - parseInt(item.range.min)) * dx + parseInt(item.scale.min)
      ret[item.shortcut] = { name: item.data, value: val, unit: item.unit }
    }
  })

  return ret
}
export function getTeachInInfo (telegram) {
  const p = telegram
  if (p.RORG === 0xa5 || p.RORG === 0xd5) {
    var rorg = p.RORG
    var func = p.payload.getValue(0, 6)
    var typ = p.payload.getValue(6, 7)
    var manId = p.payload.getValue(13, 10)
    return {
      teachInType: p.RORG === 0xa5 ? '4BS' : '1BS',
      senderId: p.senderId,
      eep: {
        rorg,
        func,
        typ,
        toString () {
          return `${rorg.toString(16).padStart(2, '0')}-${func.toString(16).padStart(2, '0')}-${typ.toString(16).padStart(2, '0')}`
        }
      },
      manufacturer: {
        id: manId,
        name: ''
      },
      get radioERP1 () {
        return telegram
      },
      get esp3Packet () {
        return telegram.esp3packet
      }
    }
  } else if (p.RORG === 0xf6) {
    return {
      teachInType: 'RPS',
      senderId: p.senderId
    }
  } else if (p.RORG === 0xd4) {
    return {
      teachInType: 'UTE',
      senderId: p.senderId
    }
  }
}
